* What are image, container: 
	+ Image: Read-only template to create containers. Steps detailed on Dockerfile. 
	+ Container: Running instance of an image. 

* Difference between RUN and CMD: 
	+ RUN: During the build process, usually to install SW. 
	+ CMD: Execute when the container starts. 

* What to do if the image is too large: 
	+ Switch to alpine Linux. 

* What do we use Compose for: 
	+ To run multiple containers together with a single config file. 

* A real-world scenario: 
	+ Run web app locally exactly like it runs on the server. 

* What is a Docker registry: 
	+ Where images are pushed to. Contains repositories that are meant for a single image and its versions (tags). 

* Default networks: 
	+ Bridge: for isolated containers. 
	+ Host: shares host netw. 

* How to persistent storage: 
	+ Volumes store data that remain even if container is removed. 

* ENTRYPOINT VS CMD: 
	+ CMD: command will get replaced by CLI arguments passed. Also can be used as default value for ENTRYPOINT. 
	+ ENTRYPOINT: CLI arguments will be appended to the entrypoint. Can be overriden with --entrypoint. 

* Compose versions:
	+ Original (v1): archaic. 
	+ Version "2": No "links" required as all containers are auto attached to dedicated bridge netw. Supports depends_on. 
	+ Version "3": Support for Swarm. %%%STACKS 




* Commands: 
	+ View running containers: 					docker ps 
	+ Even those stopped: 					docker ps -a 
	+ Run a container and give it a name: 				docker run --name <NAME> <IMAGE> 
	+ Delete a container: 					docker rm <FIRST_ID_LETTERS> 
	+ Delete an image: 						docker rmi <REPO>:<TAG> 
	+ Troubleshoot: 						docker logs <NAME> 
	+ Pass an env var: 						docker run --env VAR_NAME=<VAL> <IMAGE> 
	+ Get docker version if running: 				docker info 2>/dev/null | grep Version | head -1 
	+ Get latest Alpine image: 					docker pull alpine 
	+ See the size of Python images: 				docker images | tr -s ' ' | grep python | cut -d' ' -f1,7 
	+ Run Linux container and keep alive:				docker run -dit --name myalpine_cont_ alpine:latest 
	+ Execute a command in it (Win git-bash): 			winpty docker exec -t myalpine_cont_ ls //etc/ 
	+ Build an image from a container: 				docker build . -t test_img 
	+ Push it to a private registry (+ tag, authenticate): 		docker build -t <USER>/<REPO>:01 && docker login && docker push <IMAGE> 
	+ Push it to ECR: 						# Copy-paste commands from "View push commands". 
	+ Build images specified with "build" on YAML: 			docker-compose build 
	+ Run multiple containers dettached: 				docker-compose up -d 



* Dockerfile: 
	+ Run a task, return result, exit:
		FROM alpine:latest 
		RUN apk add python3 
		COPY script.py /root/script.py 
		ENTRYPOINT ["python3", "/root/script.py"]

	+ Ubuntu sleep for X seconds: 
		FROM Ubuntu
		ENTRYPOINT ["sleep"]				docker run ubuntu-sleep 10 
		CMD ["5"] 					# Default value. 

	+ Long-running service: 
		FROM nginx
		...
		CMD ["nginx", "-g", "daemon off;"]


* Compose:
	+ Click counter: 
		- First cd into the project subdir. 
		---
		services:
		  redis:
		    image: redis:alpine
		  clickcounter:
		    image: click-counter 
		    ports:
		      - <HOST>:<CONT>
	+ Voting app:
		- First cd into the project subdir. 
		---
		services:
		  redis:
		    image: redis
		    networks:
		      - back-end
		  db:
		    image: postgres:9.4
		    networks:
		      - back-end
		    environment:
		      POSTGRES_PASSWORD: postgres
		  vote:
		    build: vote/voting-app
		    networks:
		      - front-end
		      - back-end
		  result:
		    build: result/result-app
		    networks:
		      - front-end
		      - back-end 
		networks:
		  front-end:
		  back-end: 

